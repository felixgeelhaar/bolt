name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21', '1.22', '1.23']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Verify dependencies
      run: go mod verify
    
    - name: Run tests
      run: go test -v -race -short -coverprofile=coverage.out ./...
    
    - name: Run tests with count flag (detect flaky tests)
      run: go test -v -count=5 ./...
    
    - name: Upload coverage to Codecov
      if: matrix.go-version == '1.21'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        args: --timeout=5m

  benchmark:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run benchmarks
      run: |
        # Run benchmarks with build tags and capture output
        if go test -bench=. -benchmem -count=3 -tags=bench > benchmark.txt 2>&1; then
          echo "Benchmarks completed successfully"
          cat benchmark.txt
        else
          echo "Benchmarks failed, running without tags as fallback"
          go test -bench=. -benchmem -count=3 > benchmark.txt 2>&1 || true
          cat benchmark.txt
        fi
    
    - name: Upload benchmark results
      if: hashFiles('benchmark.txt') != ''
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark.txt
        retention-days: 30

  cross-platform:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ['1.21']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Run tests
      run: go test -v -short ./...
    
    - name: Build
      run: go build -v ./...

  security:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Install gosec
      run: go install github.com/securego/gosec/v2/cmd/gosec@latest
    
    - name: Run Gosec Security Scanner
      run: |
        gosec -fmt sarif -out results.sarif ./...
      continue-on-error: true
    
    - name: Upload SARIF file
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif